<ActorFrame><children>
	<ActorFrame InitCommand="%EvaluationInit" FirstUpdateCommand="%Evaluation" />
	<ActorFrame Command="queuecommand,Icon" IconCommand="%function() StyleIcon() end" />
	<!-- handle logic -->
	<Layer
		Type="ActorFrame"
		InitCommand="queuecommand,Set"
		SetCommand="%function(self)
			local timingwindows = {
				W1 = PREFSMAN:GetPreference'JudgeWindowSecondsMarvelous',
				W2 = PREFSMAN:GetPreference'JudgeWindowSecondsPerfect',
				W3 = PREFSMAN:GetPreference'JudgeWindowSecondsGreat',
				W4 = PREFSMAN:GetPreference'JudgeWindowSecondsGood',
				W5 = PREFSMAN:GetPreference'JudgeWindowSecondsBoo',
			}
			local function offsettojudge(offset)
				if offset <= timingwindows.W1 then return 'W1'
				elseif offset <= timingwindows.W2 then return 'W2'
				elseif offset <= timingwindows.W3 then return 'W3'
				elseif offset <= timingwindows.W4 then return 'W4'
				elseif offset <= timingwindows.W5 then return 'W5'
				end
				return 'W6'
			end
			for pn = 1, 2 do
				if GAMESTATE:IsPlayerEnabled(pn - 1) then
					do
						-- judgment info logic
						local gradeframe = SCREENMAN('GradeFrameP' .. pn)
						local judgments = gradeframe'Judgments'
						local radarvalues = gradeframe'Radar'
						local actors = {
							W1 =	{text = judgments'W1',		number = SCREENMAN('MarvelousNumberP' .. pn),	index = 0, color = _SL.CommonColors.W1},
							W2 =	{text = judgments'W2',		number = SCREENMAN('PerfectNumberP' .. pn),		index = 1, color = _SL.CommonColors.W2},
							W3 =	{text = judgments'W3',		number = SCREENMAN('GreatNumberP' .. pn),		index = 2, color = _SL.CommonColors.W3},
							W4 =	{text = judgments'W4',		number = SCREENMAN('GoodNumberP' .. pn),		index = 3, color = _SL.CommonColors.W4},
							W5 =	{text = judgments'W5',		number = SCREENMAN('BooNumberP' .. pn),			index = 4, color = _SL.CommonColors.W5},
							W6 =	{text = judgments'W6',		number = SCREENMAN('MissNumberP' .. pn),		index = 5, color = _SL.CommonColors.W6},
							Holds = {text = radarvalues'Holds', number = SCREENMAN('HoldsTextP' .. pn),			index = 0, color = _SL.CommonColors.White},
							Mines = {text = radarvalues'Mines', number = SCREENMAN('MinesTextP' .. pn),			index = 1, color = _SL.CommonColors.White},
							Hands = {text = radarvalues'Hands', number = SCREENMAN('HandsTextP' .. pn),			index = 2, color = _SL.CommonColors.White},
							Rolls = {text = radarvalues'Rolls', number = SCREENMAN('RollsTextP' .. pn),			index = 3, color = _SL.CommonColors.White},
						}

						judgments:xy(pn == 1 and 190 or -200, -275)
						radarvalues:xy(pn == 1 and -300 or 195, -125)

						for i, actor in pairs(actors) do
							actor.text:y(77 * actor.index):shadowlength(0):horizalign'right'
							actor.text:diffuse(_SL.HexToRGB(actor.color))
							actor.number:diffuse(_SL.HexToRGB(actor.color))
						end

						local w5count = tonumber(actors.W5.number:GetText(), 10)
						if w5count > 0 then actors.W5.text:settext'pad' end

						if not Decents() then actors.W4.number:settext('    ') end
						if not WayOffs() then actors.W5.number:settext('    ') end
					end
					do
						if GAMESTATE:IsCourseMode() then return end
						-- lifebar / scatterplot / spellcard logic
						local stats = STATSMAN:GetCurStageStats()
						local song = stats:GetPossibleSongs()[1]
						local songlen = song:StepsLengthSeconds()
						local pss = stats:GetPlayerStageStats(pn - 1)
						local details = pss:GetDetailedStageStats()

						local pane = SCREENMAN'Underlay'('GradePaneP' .. pn)
						local lifebar = pane'LifeBar'
						local scatterplot = pane'ScatterPlot'

						local panesize = {width = 305, height = 86}
						local halfheight = panesize.height / 2
						local datasize = #details

						lifebar:SetDrawMode'linestrip':SetNumVertices(datasize + 2)
						scatterplot:SetDrawMode'quads':SetNumVertices(datasize * 4)
						local widestoffset = 0
						do
							-- add a point at song start to draw the lifebar
							local when = 0
							local life = pss:GetLifeRecordLerpAt(when)
							local x = when / songlen * panesize.width
							lifebar:SetVertexPosition(0, x, panesize.height - (life * panesize.height), 0)
								   :SetVertexColor(0, 1, 1, 1, 0.75)
								   :SetLineWidth(2) -- sorry intel users
						end
						for i, data in ipairs(details) do
							-- main lifebar portion
							local when = data.time
							local life = pss:GetLifeRecordLerpAt(when)
							local x = when / songlen * panesize.width
							lifebar:SetVertexPosition(i, x, panesize.height - (life * panesize.height), 0)
								   :SetVertexColor(i, 1, 1, 1, 0.75)
								   :SetLineWidth(2) -- sorry intel users

							local index = (i - 1) * 4
							local vert1, vert2, vert3, vert4 = index, index + 1, index + 2, index + 3
							if data.tns then
								local tns = data.tns
								if tns ~= 'TNS_HitMine' and tns ~= 'TNS_Miss' and tns ~= 'TNS_AvoidMine' then
									local offset = (-data.offset / (details.widestoffset + 0.01)) * panesize.height / 2
									local color = _SL.CommonColors[string.sub(tns, 5)]
									scatterplot:SetVertexPosition(vert1, x - 0.75, offset - 0.75, 0)
											   :SetVertexPosition(vert2, x - 0.75, offset + 0.75, 0)
											   :SetVertexPosition(vert3, x + 0.75, offset + 0.75, 0)
											   :SetVertexPosition(vert4, x + 0.75, offset - 0.75, 0)
											   :SetVertexColor(vert1, _SL.HexToRGB(color))
											   :SetVertexColor(vert2, _SL.HexToRGB(color))
											   :SetVertexColor(vert3, _SL.HexToRGB(color))
											   :SetVertexColor(vert4, _SL.HexToRGB(color))
								elseif tns == 'TNS_Miss' then
									local color = _SL.CommonColors.W6
									scatterplot:SetVertexPosition(vert1, x - 0.5, -halfheight, 0)
											   :SetVertexPosition(vert2, x - 0.5, halfheight, 0)
											   :SetVertexPosition(vert3, x + 0.5, halfheight, 0)
											   :SetVertexPosition(vert4, x + 0.5, -halfheight, 0)
											   :SetVertexColor(vert1, _SL.HexToRGB(color .. '80'))
											   :SetVertexColor(vert2, _SL.HexToRGB(color .. '80'))
											   :SetVertexColor(vert3, _SL.HexToRGB(color .. '80'))
											   :SetVertexColor(vert4, _SL.HexToRGB(color .. '80'))
								elseif tns == 'TNS_HitMine' then
									scatterplot:SetVertexPosition(vert1, x - 0.5, -halfheight, 0)
											   :SetVertexPosition(vert2, x - 0.5, halfheight, 0)
											   :SetVertexPosition(vert3, x + 0.5, halfheight, 0)
											   :SetVertexPosition(vert4, x + 0.5, -halfheight, 0)
											   :SetVertexColor(vert1, _SL.HexToRGB'#88888880')
											   :SetVertexColor(vert2, _SL.HexToRGB'#88888880')
											   :SetVertexColor(vert3, _SL.HexToRGB'#88888880')
											   :SetVertexColor(vert4, _SL.HexToRGB'#88888880')
								end
							else
								scatterplot:SetVertexPosition(vert1, x, 0, 0)
										   :SetVertexPosition(vert2, x, 0, 0)
										   :SetVertexPosition(vert3, x, 0, 0)
										   :SetVertexPosition(vert4, x, 0, 0)
										   :SetVertexColor(vert1, 1, 1, 1, 0)
										   :SetVertexColor(vert2, 1, 1, 1, 0)
										   :SetVertexColor(vert3, 1, 1, 1, 0)
										   :SetVertexColor(vert4, 1, 1, 1, 0)
							end
						end
						do
							-- add a point at song end to draw the lifebar
							local when = songlen
							local life = pss:GetLifeRecordLerpAt(when)
							local x = when / songlen * panesize.width
							lifebar:SetVertexPosition(datasize + 1, x, panesize.height - (life * panesize.height), 0)
								   :SetVertexColor(datasize + 1, 1, 1, 1, 0.75)
								   :SetLineWidth(2) -- sorry intel users
						end

						local spellcardregion = pane'SpellCards'
						local spellcards = song:GetSpellCards()
						spellcardregion:SetDrawMode'quads':SetNumVertices(#spellcards * 8)
						for i, card in ipairs(spellcards) do
							-- print(i, card.Name, #spellcards)
							local index = (i - 1) * 4
							local vert1, vert2, vert3, vert4 = index, index + 1, index + 2, index + 3
							local left = song:GetElapsedTimeFromBeat(card.StartBeat) / songlen * panesize.width
							local right = song:GetElapsedTimeFromBeat(card.EndBeat) / songlen * panesize.width
							local color = card.Color
							spellcardregion:SetVertexPosition(vert1, left, 0, 0)
										:SetVertexPosition(vert2, left, panesize.height, 0)
										:SetVertexPosition(vert3, right, panesize.height, 0)
										:SetVertexPosition(vert4, right, 0, 0)
										:SetVertexColor(vert1, color[1], color[2], color[3], color[4])
										:SetVertexColor(vert2, color[1], color[2], color[3], color[4])
										:SetVertexColor(vert3, color[1], color[2], color[3], color[4])
										:SetVertexColor(vert4, color[1], color[2], color[3], color[4])
						end
					end
				end
			end
		end"
	/>
	<ActorFrame
		Condition="GAMESTATE:IsPlayerEnabled(PLAYER_1) and not _SL.IsCouples(0)"
		Command="x,DoublesOffset()"
		InitCommand="queuecommand,Set"
		Name="GradePaneP1"
	><children>
		<Layer Type="Quad" OnCommand="diffuse,#101519;stretchto,SCREEN_CENTER_X-310,320,SCREEN_CENTER_X-5,443" />
		<Layer Type="Quad" OnCommand="diffuse,#1E282F;stretchto,SCREEN_CENTER_X-310,180,SCREEN_CENTER_X-5,355" />
		<Layer Type="Quad" OnCommand="diffuse,#00000077;stretchto,SCREEN_CENTER_X-310,180,SCREEN_CENTER_X-146,240" />

		<Layer Type="Polygon" Name="SpellCards" OnCommand="xy,(SCREEN_WIDTH * 0.25) - (305 / 2) + 2,356" />
		<Layer Type="Quad" OnCommand="diffuse,#101519A0;stretchto,SCREEN_CENTER_X-310,356,SCREEN_CENTER_X-5,443 - 43;fadetop,1" />
		<Layer Type="Quad" OnCommand="diffuse,#101519A0;stretchto,SCREEN_CENTER_X-310,356 + 44,SCREEN_CENTER_X-5,443;fadebottom,1" />
		<Layer Type="Quad" OnCommand="diffuse,#101519D8;stretchto,SCREEN_CENTER_X-310,356,SCREEN_CENTER_X-5,443;" />
		<Layer Type="Polygon" Name="LifeBar" OnCommand="xy,(SCREEN_WIDTH * 0.25) - (305 / 2) + 2,356" />
		<Layer Type="Polygon" Name="ScatterPlot" OnCommand="xy,(SCREEN_WIDTH * 0.25) - (305 / 2) + 2,356 + 43" />
	</children></ActorFrame>
	<ActorFrame
		Condition="GAMESTATE:IsPlayerEnabled(PLAYER_2) and not _SL.IsCouples(1)"
		Command="x,DoublesOffset()"
		Name="GradePaneP2"
	><children>
		<Layer Type="Quad" OnCommand="diffuse,#101519;stretchto,SCREEN_CENTER_X+5,320,SCREEN_CENTER_X+310,443" />
		<Layer Type="Quad" OnCommand="diffuse,#1E282F;stretchto,SCREEN_CENTER_X+5,180,SCREEN_CENTER_X+310,355" />
		<Layer Type="Quad" OnCommand="diffuse,#00000077;stretchto,SCREEN_CENTER_X+146,180,SCREEN_CENTER_X+310,240" />
		
		<Layer Type="Polygon" Name="SpellCards" OnCommand="xy,(SCREEN_WIDTH * 0.75) - (305 / 2) - 2,356" />
		<Layer Type="Quad" OnCommand="diffuse,#101519A0;stretchto,SCREEN_CENTER_X+5,356,SCREEN_CENTER_X+310,443 - 43;fadetop,1" />
		<Layer Type="Quad" OnCommand="diffuse,#101519A0;stretchto,SCREEN_CENTER_X+5,356 + 44,SCREEN_CENTER_X+310,443;fadebottom,1" />
		<Layer Type="Quad" OnCommand="diffuse,#101519D8;stretchto,SCREEN_CENTER_X+5,356,SCREEN_CENTER_X+310,443;" />
		<Layer Type="Polygon" Name="LifeBar" OnCommand="xy,(SCREEN_WIDTH * 0.75) - (305 / 2) - 2, 356" />
		<Layer Type="Polygon" Name="ScatterPlot" OnCommand="xy,(SCREEN_WIDTH * 0.75) - (305 / 2) - 1,356 + 43" />
	</children></ActorFrame>
	<Layer
		File="@'../ScreenSelectMusic underlay/Banner'..Color()..'.png'"
		InitCommand="x,SCREEN_CENTER_X;y,SCREEN_TOP+115;;ZoomToWidth,278;ZoomToHeight,109"
		OnCommand="ztest,1;diffusealpha,0;linear,0.6;diffusealpha,1"
		Name="Banner"
	/>
</children></ActorFrame>
